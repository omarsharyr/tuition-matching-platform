// frontend/src/pages/tutor/TutorDashboard.jsx
import React, { useState, useEffect, useMemo } from "react";
import { useNavigate } from "react-router-dom";
import api from "../../utils/api";
import { logout } from "../../utils/auth";
import TutorSidebar from "../../components/TutorSidebar";
import JobBrowser from "../../components/JobBrowser";
import "./TutorDashboard.css";

export default function TutorDashboard() {
  const navigate = useNavigate();
  
  // State management - aligned with StudentDashboard
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [sidebarOpen, setSidebarOpen] = useState(false);
  
  // Dashboard data
  const [kpis, setKpis] = useState({ 
    eligibleJobs: 0, 
    appliedJobs: 0, 
    shortlistedJobs: 0, 
    hiredJobs: 0 
  });
  
  const [activityFeed, setActivityFeed] = useState([]);
  const [recentJobs, setRecentJobs] = useState([]);
  const [myApplications, setMyApplications] = useState([]);

  // auth
  const user = useMemo(() => {
    try { 
      const userData = localStorage.getItem("user") || localStorage.getItem("authUser");
      return userData ? JSON.parse(userData) : {};
    }
    catch { return {}; }
  }, []);
  const role = String(user?.role || "").toLowerCase();
  
  useEffect(() => {
    if (role !== "tutor") {
      console.log("TutorDashboard: Access denied, role:", role);
      navigate("/forbidden", { replace: true });
    }
  }, [role, navigate, user]);

  // Load dashboard data
  useEffect(() => {
    fetchDashboardData();
  }, []);

  const fetchDashboardData = async () => {
    try {
      setLoading(true);
      setError("");

      // Fetch dashboard stats
      const statsRes = await api.get("/tutor/dashboard/stats");
      console.log("✅ Dashboard stats API response:", statsRes.status, statsRes.data);
      
      // Fetch jobs
      const jobsRes = await api.get("/tutor/jobs");
      console.log("✅ Jobs API response:", jobsRes.status, jobsRes.data?.posts?.length || 0, "jobs");
      const jobs = jobsRes.data?.posts || [];
      
      // Fetch applications
      const applicationsRes = await api.get("/tutor/applications");
      console.log("✅ Applications API response:", applicationsRes.status, applicationsRes.data?.applications?.length || 0, "applications");
      const applications = applicationsRes.data?.applications || [];
      
      // Fetch activity feed (simulate based on applications and jobs)
      const activity = [];
      applications.slice(0, 5).forEach(app => {
        activity.push({
          id: app._id,
          type: 'application_update',
          title: `Application ${app.status}`,
          description: `Your application for ${app.jobTitle || 'a position'} was ${app.status}`,
          createdAt: app.updatedAt || app.createdAt,
          jobId: app.jobId
        });
      });

      setActivityFeed(activity);

      // Calculate KPIs from real data
      const eligibleJobs = jobs.filter(job => job.status === 'open').length;
      const appliedJobs = applications.filter(app => app.status === 'applied').length;
      const shortlistedJobs = applications.filter(app => app.status === 'shortlisted').length;
      const hiredJobs = applications.filter(app => app.status === 'accepted').length;

      setKpis({
        eligibleJobs: eligibleJobs || statsRes.data?.eligibleJobs || 0,
        appliedJobs: appliedJobs || statsRes.data?.appliedJobs || 0,
        shortlistedJobs: shortlistedJobs || statsRes.data?.shortlistedJobs || 0,
        hiredJobs: hiredJobs || statsRes.data?.hiredJobs || 0
      });

      setRecentJobs(jobs);
      setMyApplications(applications);

    } catch (error) {
      console.error("❌ Tutor dashboard fetch error:", error);
      setError("Failed to load dashboard data. Please check your connection and try again.");
      
      // Set empty state on error
      setKpis({
        eligibleJobs: 0,
        appliedJobs: 0,
        shortlistedJobs: 0,
        hiredJobs: 0
      });
      setRecentJobs([]);
      setMyApplications([]);
      setActivityFeed([]);
    } finally {
      setLoading(false);
    }
  };

  // Helper functions for managing data
  const getFilteredJobs = () => {
    return recentJobs.filter(job => 
      job.status === 'open' && 
      !myApplications.some(app => app.jobId === job._id)
    );
  };

  // Quick action handlers
  const handleQuickAction = (action) => {
    switch (action) {
      case 'browse_jobs':
        navigate('/tutor/jobs');
        break;
      case 'view_applications':
        navigate('/tutor/applications');
        break;
      case 'open_messages':
        navigate('/tutor/messages');
        break;
      case 'view_schedule':
        navigate('/tutor/schedule');
        break;
      default:
        break;
    }
  };

  // Activity item click handler
  const handleActivityClick = (activity) => {
    switch (activity.type) {
      case 'application_update':
        navigate(`/tutor/applications`);
        break;
      case 'new_message':
        navigate(`/tutor/messages`);
        break;
      case 'schedule_update':
        navigate(`/tutor/schedule`);
        break;
      default:
        break;
    }
  };

  // Loading skeleton
  if (loading) {
    return (
      <div className="dashboard-container">
        <TutorSidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
        <div className="dashboard-content">
          <div className="dashboard-loading">
            <div className="loading-spinner"></div>
            <p>Loading your dashboard...</p>
          </div>
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="dashboard-container">
        <TutorSidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
        <div className="dashboard-content">
          <div className="dashboard-error">
            <div className="error-icon">⚠️</div>
            <h3>Unable to load dashboard</h3>
            <p>{error}</p>
            <button 
              className="btn-primary"
              onClick={fetchDashboardData}
            >
              Try Again
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Sidebar toggle
  const toggleSidebar = () => {
    setIsSidebarCollapsed(!isSidebarCollapsed);
  };

  // Handle job application
  const handleApplyToJob = async (jobId) => {
    try {
      await api.post(`/tutor/jobs/${jobId}/apply`);
      
      // Refresh data after applying
      const [jobsRes, applicationsRes] = await Promise.all([
        api.get("/tutor/jobs"),
        api.get("/tutor/applications")
      ]);
      
      setRecentJobs(jobsRes.data || []);
      setMyApplications(applicationsRes.data || []);
      
      // Update KPIs
      setKpis(prev => ({
        ...prev,
        appliedJobs: prev.appliedJobs + 1,
        eligibleJobs: Math.max(0, prev.eligibleJobs - 1)
      }));
      
    } catch (error) {
      console.error("Apply to job error:", error);
      setErr("Failed to apply to job. Please try again.");
    }
  };

  // Handle withdraw application
  const handleWithdrawApplication = async (applicationId) => {
    try {
      await api.delete(`/tutor/applications/${applicationId}`);
      
      // Refresh applications
      const applicationsRes = await api.get("/tutor/applications");
      setMyApplications(applicationsRes.data || []);
      
      // Update KPIs
      setKpis(prev => ({
        ...prev,
        appliedJobs: Math.max(0, prev.appliedJobs - 1)
      }));
      
    } catch (error) {
      console.error("Withdraw application error:", error);
      setErr("Failed to withdraw application. Please try again.");
    }
  };

  if (loading) {
    return (
      <div className="tutor-dashboard">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>Loading dashboard...</p>
        </div>
      </div>
    );
  }

  if (err) {
    return (
      <div className="tutor-dashboard">
        <div className="error-container">
          <h2>Error Loading Dashboard</h2>
          <p>{err}</p>
          <button onClick={() => window.location.reload()} className="retry-btn">
            Retry
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={`tutor-layout ${isSidebarCollapsed ? 'sidebar-collapsed' : 'sidebar-expanded'}`}>
      <TutorSidebar isCollapsed={isSidebarCollapsed} toggleSidebar={toggleSidebar} />
      
      {/* Mobile overlay */}
      {!isSidebarCollapsed && (
        <div 
          className="mobile-overlay" 
          onClick={() => setIsSidebarCollapsed(true)}
        />
      )}
      
      <div className="tutor-content">
        {/* Header */}
        <header className="dashboard-header">
          <div className="header-left">
            <h1 className="page-title">Welcome, {user.name || 'Tutor'}!</h1>
            <p className="page-subtitle">Find opportunities and manage your teaching career</p>
          </div>
          <div className="header-right">
            <button 
              className="btn-primary"
              onClick={() => navigate('/tutor/jobs')}
            >
              <span className="btn-icon">🔍</span>
              Browse Jobs
            </button>
            <button 
              className="btn-outline-danger"
              onClick={logout}
              title="Logout"
            >
              <span className="btn-icon">🚪</span>
              Logout
            </button>
            <div className="user-badge">
              <span className="badge-icon">👨‍🏫</span>
              <span className="badge-text">Tutor</span>
            </div>
          </div>
        </header>

      {/* KPI Cards */}
      <div className="kpi-grid">
        {/* Eligible Jobs Card */}
        <div className="kpi-card eligible">
          <div className="kpi-header">
            <div className="kpi-icon">
              <span>🎯</span>
            </div>
            <div className="kpi-trend positive">
              <span className="trend-dot"></span>
              Available
            </div>
          </div>
          <div className="kpi-main">
            <div className="kpi-value">{kpis.eligibleJobs}</div>
            <div className="kpi-label">Eligible Jobs</div>
            <div className="kpi-description">Jobs matching your profile</div>
          </div>
          <div className="kpi-stats">
            <div className="stat-row">
              <span className="stat-label">
                <span className="stat-icon">🎓</span>
                New This Week
              </span>
              <span className="stat-value">5</span>
            </div>
          </div>
        </div>

        {/* Applied Jobs Card */}
        <div className="kpi-card applied">
          <div className="kpi-header">
            <div className="kpi-icon">
              <span>📝</span>
            </div>
            <div className="kpi-trend active">
              <span className="trend-dot active"></span>
              In Progress
            </div>
          </div>
          <div className="kpi-main">
            <div className="kpi-value">{kpis.appliedJobs}</div>
            <div className="kpi-label">Applied</div>
            <div className="kpi-description">Applications submitted</div>
          </div>
          <div className="kpi-stats">
            <div className="stat-row">
              <span className="stat-label">
                <span className="stat-icon">⏳</span>
                Pending Review
              </span>
              <span className="stat-value">{kpis.appliedJobs - kpis.shortlistedJobs}</span>
            </div>
          </div>
        </div>

        {/* Shortlisted Card */}
        <div className="kpi-card shortlisted">
          <div className="kpi-header">
            <div className="kpi-icon">
              <span>⭐</span>
            </div>
            <div className="kpi-trend positive">
              <span className="trend-dot"></span>
              Promising
            </div>
          </div>
          <div className="kpi-main">
            <div className="kpi-value">{kpis.shortlistedJobs}</div>
            <div className="kpi-label">Shortlisted</div>
            <div className="kpi-description">Selected for interview</div>
          </div>
          <div className="kpi-stats">
            <div className="stat-row">
              <span className="stat-label">
                <span className="stat-icon">📞</span>
                Interviews Due
              </span>
              <span className="stat-value">2</span>
            </div>
          </div>
        </div>

        {/* Hired Jobs Card */}
        <div className="kpi-card hired">
          <div className="kpi-header">
            <div className="kpi-icon">
              <span>🎉</span>
            </div>
            <div className="kpi-trend success">
              <span className="trend-dot success"></span>
              Success
            </div>
          </div>
          <div className="kpi-main">
            <div className="kpi-value">{kpis.hiredJobs}</div>
            <div className="kpi-label">Hired</div>
            <div className="kpi-description">Active teaching positions</div>
          </div>
          <div className="kpi-stats">
            <div className="stat-row">
              <span className="stat-label">
                <span className="stat-icon">💰</span>
                Monthly Earning
              </span>
              <span className="stat-value">$420</span>
            </div>
          </div>
        </div>
      </div>

      {/* Dashboard Sections */}
      <div className="dashboard-sections">
        {/* Job Board Section */}
        <div className="section-card jobs-section">
          <div className="section-header">
            <h3 className="section-title">
              <span className="section-icon">💼</span>
              Job Board
            </h3>
            <div className="section-tabs">
              <button 
                className={`tab-btn ${activeTab === 'eligible' ? 'active' : ''}`}
                onClick={() => setActiveTab('eligible')}
              >
                Eligible ({recentJobs.filter(job => 
                  job.status === 'open' && 
                  !myApplications.some(app => app.jobId === job._id)
                ).length})
              </button>
              <button 
                className={`tab-btn ${activeTab === 'applied' ? 'active' : ''}`}
                onClick={() => setActiveTab('applied')}
              >
                Applied ({myApplications.length})
              </button>
              <button 
                className={`tab-btn ${activeTab === 'browse' ? 'active' : ''}`}
                onClick={() => setActiveTab('browse')}
              >
                Browse All Jobs
              </button>
            </div>
          </div>
          
          <div className="jobs-list">
            {activeTab === 'browse' ? (
              <JobBrowser />
            ) : getFilteredJobs().length === 0 ? (
              <div className="empty-state">
                <p>
                  {activeTab === 'eligible' 
                    ? "No eligible jobs available at the moment. Check back later!"
                    : "You haven't applied to any jobs yet."
                  }
                </p>
                {activeTab === 'eligible' && (
                  <button 
                    className="view-all-btn"
                    onClick={() => setActiveTab('browse')}
                  >
                    Browse All Jobs
                  </button>
                )}
              </div>
            ) : (
              getFilteredJobs().map((job) => {
                const hasApplied = myApplications.some(app => app.jobId === job._id);
                return (
                  <div key={job._id || job.id} className="job-item">
                    <div className="job-info">
                      <div className="job-title">{job.title}</div>
                      <div className="job-meta">
                        <span className="job-subject">{job.subject}</span>
                        <span className="job-level">{job.level}</span>
                        <span className="job-location">{job.location}</span>
                        <span className="job-budget">
                          {job.budgetAmount ? `৳${job.budgetAmount}` : 
                           (job.budget && typeof job.budget === 'object' && job.budget.min && job.budget.max) ? 
                           `৳${job.budget.min} - ৳${job.budget.max}` : 
                           job.budget ? `৳${job.budget}` : 'Budget not set'}
                          {job.paymentType === 'hourly' ? '/hour' : 
                           job.paymentType === 'monthly' ? '/month' : 
                           job.paymentType === 'per_session' ? '/session' : ''}
                        </span>
                      </div>
                      <div className="job-stats">
                        <span className="student-name">Posted by: {job.studentName || job.student?.name}</span>
                        <span className="job-date">• {new Date(job.createdAt).toLocaleDateString()}</span>
                      </div>
                    </div>
                    <div className="job-actions">
                      <button 
                        className="btn-view" 
                        title="View details"
                        onClick={() => navigate(`/tutor/jobs/${job._id}`)}
                      >
                        👁️
                      </button>
                      {activeTab === 'eligible' && !hasApplied && (
                        <button 
                          className="btn-apply" 
                          title="Apply now"
                          onClick={() => handleApplyToJob(job._id)}
                        >
                          📤
                        </button>
                      )}
                      {hasApplied && (
                        <button 
                          className="btn-message" 
                          title="Message student"
                          onClick={() => navigate(`/tutor/chat/${job.student?._id}`)}
                        >
                          💬
                        </button>
                      )}
                      <button className="btn-save" title="Save job">🔖</button>
                    </div>
                  </div>
                );
              })
            )}
          </div>
          
          <div className="section-footer">
            <button 
              className="view-all-btn"
              onClick={() => navigate('/tutor/jobs')}
            >
              Browse All Jobs →
            </button>
          </div>
        </div>

        {/* My Applications Section */}
        <div className="section-card applications-section">
          <h3 className="section-title">
            <span className="section-icon">📋</span>
            My Applications
          </h3>
          
          <div className="applications-list">
            {myApplications.length === 0 ? (
              <div className="empty-state">
                <p>No applications yet. Browse jobs and apply to start your teaching journey!</p>
                <button 
                  className="view-all-btn"
                  onClick={() => navigate('/tutor/jobs')}
                >
                  Browse Jobs
                </button>
              </div>
            ) : (
              myApplications.slice(0, 3).map((application) => (
                <div key={application._id || application.id} className="application-item">
                  <div className="application-info">
                    <div className="job-title">{application.jobTitle || application.post?.title}</div>
                    <div className="application-meta">
                      <span className="student-name">{application.studentName || application.student?.name}</span>
                      <span className="subject">{application.subject || application.post?.subject}</span>
                      <span className="budget">
                        {application.budgetAmount || application.post?.budgetAmount ? 
                         `৳${application.budgetAmount || application.post?.budgetAmount}` : 
                         (application.budget && typeof application.budget === 'object' && application.budget.min && application.budget.max) ? 
                         `৳${application.budget.min} - ৳${application.budget.max}` :
                         (application.post?.budget && typeof application.post.budget === 'object' && application.post.budget.min && application.post.budget.max) ? 
                         `৳${application.post.budget.min} - ৳${application.post.budget.max}` :
                         application.budget ? `৳${application.budget}` : 
                         application.post?.budget ? `৳${application.post.budget}` : 'Budget not set'}
                        {(application.paymentType || application.post?.paymentType) === 'hourly' ? '/hour' : 
                         (application.paymentType || application.post?.paymentType) === 'monthly' ? '/month' : 
                         (application.paymentType || application.post?.paymentType) === 'per_session' ? '/session' : ''}
                      </span>
                    </div>
                    <div className="application-date">Applied: {new Date(application.createdAt).toLocaleDateString()}</div>
                  </div>
                  <div className="application-status">
                    <span className={`status-badge ${application.status}`}>
                      {application.status}
                    </span>
                  </div>
                  <div className="application-actions">
                    {application.status === 'applied' && (
                      <button 
                        className="btn-withdraw" 
                        title="Withdraw application"
                        onClick={() => handleWithdrawApplication(application._id)}
                      >
                        ❌
                      </button>
                    )}
                    {application.status === 'shortlisted' && (
                      <button 
                        className="btn-message" 
                        title="Message student"
                        onClick={() => navigate(`/tutor/chat/${application.student?._id || application.studentId}`)}
                      >
                        💬
                      </button>
                    )}
                    {application.status === 'accepted' && (
                      <button 
                        className="btn-schedule" 
                        title="View schedule"
                        onClick={() => navigate(`/tutor/sessions/${application._id}`)}
                      >
                        📅
                      </button>
                    )}
                  </div>
                </div>
              ))
            )}
          </div>
          
          <div className="section-footer">
            <button 
              className="view-all-btn"
              onClick={() => navigate('/tutor/applications')}
            >
              View All Applications →
            </button>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="quick-actions">
        <h3 className="quick-actions-title">Quick Actions</h3>
        <div className="actions-grid">
          <button 
            className="action-card"
            onClick={() => navigate('/tutor/jobs')}
          >
            <span className="action-icon">🔍</span>
            <span className="action-text">Browse Jobs</span>
          </button>
          <button 
            className="action-card"
            onClick={() => navigate('/tutor/applications')}
          >
            <span className="action-icon">📋</span>
            <span className="action-text">My Applications</span>
          </button>
          <button 
            className="action-card"
            onClick={() => navigate('/tutor/messages')}
          >
            <span className="action-icon">💬</span>
            <span className="action-text">Messages</span>
          </button>
          <button 
            className="action-card"
            onClick={() => navigate('/tutor/profile')}
          >
            <span className="action-icon">👤</span>
            <span className="action-text">Profile</span>
          </button>
          <button 
            className="action-card"
            onClick={() => navigate('/tutor/schedule')}
          >
            <span className="action-icon">📅</span>
            <span className="action-text">Schedule</span>
          </button>
          <button 
            className="action-card"
            onClick={() => navigate('/tutor/earnings')}
          >
            <span className="action-icon">💰</span>
            <span className="action-text">Earnings</span>
          </button>
        </div>
      </div>
      </div>
    </div>
  );
}
